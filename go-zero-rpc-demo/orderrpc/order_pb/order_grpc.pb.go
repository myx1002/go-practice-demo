// 声明 proto 语法版本，固定值

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: order.proto

// proto 包名

package order_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrderInfo_GetOrderInfo_FullMethodName = "/pb.OrderInfo/GetOrderInfo"
)

// OrderInfoClient is the client API for OrderInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderInfoClient interface {
	// 定义一个 OrderInfo 一元 rpc 方法，请求体和响应体必填。
	GetOrderInfo(ctx context.Context, in *GetOrderInfoReq, opts ...grpc.CallOption) (*GetOrderInfoResp, error)
}

type orderInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderInfoClient(cc grpc.ClientConnInterface) OrderInfoClient {
	return &orderInfoClient{cc}
}

func (c *orderInfoClient) GetOrderInfo(ctx context.Context, in *GetOrderInfoReq, opts ...grpc.CallOption) (*GetOrderInfoResp, error) {
	out := new(GetOrderInfoResp)
	err := c.cc.Invoke(ctx, OrderInfo_GetOrderInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderInfoServer is the server API for OrderInfo service.
// All implementations must embed UnimplementedOrderInfoServer
// for forward compatibility
type OrderInfoServer interface {
	// 定义一个 OrderInfo 一元 rpc 方法，请求体和响应体必填。
	GetOrderInfo(context.Context, *GetOrderInfoReq) (*GetOrderInfoResp, error)
	mustEmbedUnimplementedOrderInfoServer()
}

// UnimplementedOrderInfoServer must be embedded to have forward compatible implementations.
type UnimplementedOrderInfoServer struct {
}

func (UnimplementedOrderInfoServer) GetOrderInfo(context.Context, *GetOrderInfoReq) (*GetOrderInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderInfo not implemented")
}
func (UnimplementedOrderInfoServer) mustEmbedUnimplementedOrderInfoServer() {}

// UnsafeOrderInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderInfoServer will
// result in compilation errors.
type UnsafeOrderInfoServer interface {
	mustEmbedUnimplementedOrderInfoServer()
}

func RegisterOrderInfoServer(s grpc.ServiceRegistrar, srv OrderInfoServer) {
	s.RegisterService(&OrderInfo_ServiceDesc, srv)
}

func _OrderInfo_GetOrderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderInfoServer).GetOrderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderInfo_GetOrderInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderInfoServer).GetOrderInfo(ctx, req.(*GetOrderInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderInfo_ServiceDesc is the grpc.ServiceDesc for OrderInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.OrderInfo",
	HandlerType: (*OrderInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrderInfo",
			Handler:    _OrderInfo_GetOrderInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}
