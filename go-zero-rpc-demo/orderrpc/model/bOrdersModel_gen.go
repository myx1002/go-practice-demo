// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bOrdersFieldNames          = builder.RawFieldNames(&BOrders{})
	bOrdersRows                = strings.Join(bOrdersFieldNames, ",")
	bOrdersRowsExpectAutoSet   = strings.Join(stringx.Remove(bOrdersFieldNames, "`order_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	bOrdersRowsWithPlaceHolder = strings.Join(stringx.Remove(bOrdersFieldNames, "`order_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheBubbleBOrdersOrderIdPrefix = "cache:bubble:bOrders:orderId:"
)

type (
	bOrdersModel interface {
		Insert(ctx context.Context, data *BOrders) (sql.Result, error)
		FindOne(ctx context.Context, orderId int64) (*BOrders, error)
		Update(ctx context.Context, data *BOrders) error
		Delete(ctx context.Context, orderId int64) error
	}

	defaultBOrdersModel struct {
		sqlc.CachedConn
		table string
	}

	BOrders struct {
		OrderId int64  `db:"order_id"` // 订单id
		OrderNo string `db:"order_no"` // 订单编号
	}
)

func newBOrdersModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultBOrdersModel {
	return &defaultBOrdersModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`b_orders`",
	}
}

func (m *defaultBOrdersModel) Delete(ctx context.Context, orderId int64) error {
	bubbleBOrdersOrderIdKey := fmt.Sprintf("%s%v", cacheBubbleBOrdersOrderIdPrefix, orderId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `order_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, orderId)
	}, bubbleBOrdersOrderIdKey)
	return err
}

func (m *defaultBOrdersModel) FindOne(ctx context.Context, orderId int64) (*BOrders, error) {
	bubbleBOrdersOrderIdKey := fmt.Sprintf("%s%v", cacheBubbleBOrdersOrderIdPrefix, orderId)
	var resp BOrders
	err := m.QueryRowCtx(ctx, &resp, bubbleBOrdersOrderIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `order_id` = ? limit 1", bOrdersRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, orderId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBOrdersModel) Insert(ctx context.Context, data *BOrders) (sql.Result, error) {
	bubbleBOrdersOrderIdKey := fmt.Sprintf("%s%v", cacheBubbleBOrdersOrderIdPrefix, data.OrderId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?)", m.table, bOrdersRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.OrderNo)
	}, bubbleBOrdersOrderIdKey)
	return ret, err
}

func (m *defaultBOrdersModel) Update(ctx context.Context, data *BOrders) error {
	bubbleBOrdersOrderIdKey := fmt.Sprintf("%s%v", cacheBubbleBOrdersOrderIdPrefix, data.OrderId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `order_id` = ?", m.table, bOrdersRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.OrderNo, data.OrderId)
	}, bubbleBOrdersOrderIdKey)
	return err
}

func (m *defaultBOrdersModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheBubbleBOrdersOrderIdPrefix, primary)
}

func (m *defaultBOrdersModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `order_id` = ? limit 1", bOrdersRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBOrdersModel) tableName() string {
	return m.table
}
