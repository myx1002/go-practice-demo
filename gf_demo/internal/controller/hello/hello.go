// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package hello

import (
	"gf_demo/api/hello"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/errors/gerror"
	"github.com/gogf/gf/v2/frame/g"
	"github.com/gogf/gf/v2/net/ghttp"
	"github.com/gogf/gf/v2/os/gtime"
	"github.com/gogf/gf/v2/text/gstr"
	"github.com/gogf/gf/v2/util/gconv"
	"golang.org/x/net/context"
)

type Hello struct {
}

func NewHello() *Hello {
	return &Hello{}
}

/**
 * 查询数据
 * https://goframe.org/docs/core/gdb-chaining-query-where
 */
func (h *Hello) SelectData(req *ghttp.Request) {
	/**
	 * 查询数据 One/All/Count/Value/Array/Fields
	 */
	// 查询一条数据
	md := g.Model("book")
	bk, err := md.Fields("name", "price").One()
	if err == nil {
		req.Response.WriteJson(bk)
		req.Response.Writeln()
	}

	// 查询多条数据
	bkAll, err := md.All()
	if err == nil {
		for _, v := range bkAll {
			req.Response.Writeln(v)
		}
	}

	// 查询数据量
	md = g.Model("book")
	count, err := md.Count()
	if err == nil {
		req.Response.Writeln(count)
	}

	// 查询一条数据指定字段
	name, err := md.Value("name")
	if err == nil {
		req.Response.Writeln(name)
	}

	// 查询指定列数据
	names, err := md.Group("name").Array("name")
	if err == nil {
		req.Response.WriteJson(names)
		req.Response.Writeln()
	}

	/**
	 * Max/Min/Sum/Avg
	 */
	maxPrice, err := g.Model("book").Max("price")
	minPrice, err := g.Model("book").Min("price")
	sumPrice, err := g.Model("book").Sum("price")
	avgPrice, err := g.Model("book").Avg("price")
	if err == nil {
		req.Response.Writeln(maxPrice)
		req.Response.Writeln(minPrice)
		req.Response.Writeln(sumPrice)
		// avgPrice保留两位小数
		req.Response.Writeln(gstr.NumberFormat(gconv.Float64(avgPrice), 2, ".", ","))
	}

	/**
	 * Where/WhereOr
	 */
	books, err := g.Model("book").WhereIn("id", g.Array{1, 2, 3}).WhereLike("name", "%数据%").All()
	if err == nil {
		req.Response.WriteJson(books)
		req.Response.Writeln()
	}

	md = g.Model("book")
	books, err = md.
		WhereIn("id", g.Array{1, 2, 3}).
		Where(md.Builder().WhereLike("name", "%原理%").WhereOrLike("name", "%设计%")).
		All()
	if err == nil {
		req.Response.WriteJson(books)
		req.Response.Writeln()
	}

	/**
	 * Group/Order
	 */
	md = g.Model("book")
	books, err = md.
		Fields("name").
		Group("name").All()
	if err == nil {
		req.Response.WriteJson(books)
		req.Response.Writeln()
	}

	md = g.Model("book")
	books, err = md.OrderDesc("price").OrderAsc("id").All()
	if err == nil {
		req.Response.WriteJson(books)
		req.Response.Writeln()
	}

	/**
	 * Scan
	 * Scan方法可以将查询到的数据转为自定义结构体或结构体数组。
	 * Scan会将数据库字段下划线命名对应到结构体中相应的驼峰命名上，如果对应不上，则该成员为nil或者零值。如果结构体中成员名称与数据表中字段不对应，可以用orm:标签来指定对应字段
	 */
	type Book struct {
		BookId     uint        `orm:"id"  `
		BookName   string      `orm:"name"`
		BookAuthor string      `orm:"author"`
		BookPrice  float64     `orm:"price"`
		PubTime    *gtime.Time `orm:"publish_time"`
	}
	// 单个结构体
	req.Response.WriteJson("单个结构体:")
	var singleBook *Book
	md = g.Model("book")
	err = md.Scan(&singleBook)
	if err == nil {
		req.Response.WriteJson(singleBook)
		req.Response.Writeln()
	}

	// 结构体数组
	req.Response.WriteJson("结构体数组:")
	var multiBooks []*Book
	err = md.Scan(&multiBooks)
	if err == nil {
		req.Response.WriteJson(multiBooks)
		req.Response.Writeln()
	}

	/**
	 * 分页
	 */
	req.Response.WriteJson("分页:")
	md = g.Model("book")
	all, count, err := md.Fields("name", "price").WhereGT("id", 1).Limit(0, 2).AllAndCount(false)
	if err == nil {
		req.Response.WriteJson(all)
		req.Response.Writeln(count)
	}

	req.Response.Writeln("你好你好呀")
}

/**
 * 插入数据
 * https://goframe.org/docs/core/gdb-chaining-insert-save
 * Insert	报错，主键冲突
 * Repalce	用提供的数据替换已存在同主键的数据
 * Save	用提供的数据更新已存在的同主键数据
 */
func (h *Hello) InsertData(req *ghttp.Request) {
	type Book struct {
		Id      uint
		Name    string
		Author  string
		Price   float64
		PubTime *gtime.Time `orm:"publish_time"`
	}

	md := g.Model("book")
	// map方式指定参数
	data := g.Map{
		"id":           8,
		"name":         "Linux驱动开发入门与实践",
		"author":       "郑强",
		"price":        69,
		"publish_time": gdb.Raw("now()"),
	}
	// Insert
	bookId, err := md.Data(data).InsertAndGetId()
	if err == nil {
		req.Response.Writeln(bookId)
	}

	// Replace
	book := Book{
		Id:      8,
		Name:    "Linux驱动开发入门与实践",
		Author:  "郑强",
		Price:   69.3,
		PubTime: gtime.Now(),
	}
	md.Data(book).Replace()
	// Save
	md.Data(book).Save()

	// 批量插入
	md.Data([]Book{
		{
			Id:      9,
			Name:    "Linux驱动开发入门与实践",
			Author:  "郑强",
			Price:   69.3,
			PubTime: gtime.Now(),
		},
		{
			Id:      10,
			Name:    "Linux驱动开发入门与实践",
			Author:  "郑强",
			Price:   69.3,
			PubTime: gtime.Now(),
		},
	}).Save()

}

/**
 * 更新数据
 * https://goframe.org/docs/core/gdb-chaining-update-delete
 */
func (h *Hello) UpdateData(req *ghttp.Request) {
	data := g.Map{
		"author": "郑强强",
		"price":  69.333,
	}
	md := g.Model("book")
	result, err := md.Where("author", "郑强").Data(data).Update()
	if err == nil {
		req.Response.Writeln(result)
	}

	//用来给指定字段增加/减少指定值
	g.Model("book").WhereBetween("id", 7, 8).Increment("price", 2.5)
	g.Model("book").WhereBetween("id", 9, 10).Decrement("price", 1.5)
}

func (h *Hello) Respons(ctx context.Context, req *hello.ResponsReq) (res *hello.ParamsRes, err error) {
	res = &hello.ParamsRes{
		Age:      20,
		UserName: "力宝宝",
		Password: "123456",
	}
	err = gerror.New("服务器开小差")
	return
}

/**
 * 获取GET请求参数
 */
func (h *Hello) Params(ctx context.Context, req *hello.ParamsReq) (res *hello.ParamsRes, err error) {
	r := g.RequestFromCtx(ctx)

	/**
	 * 获取GET请求参数
	 */
	// 获取路由的name参数，并设置默认值
	//name := r.GetQuery("name", "李四")
	// 通过Map的方式获取指定的参数，并设置默认值
	//data := r.GetQueryMap(g.Map{"name": "李四", "age": 20})
	// 通过Map的方式获取指定的参数，不指定值的话则是获取所有值
	//data := r.GetQueryMap()
	//r.Response.Writeln(data)

	/**
	 * 动态路由参数获取
	 */
	//routeParam := r.GetRouter("version")
	//routeParam := r.GetRouterMap()
	//r.Response.Writeln(routeParam)

	/**
	 * 获取POST请求参数
	 */
	// 指定字段获取
	//name := r.GetForm("name", "李四")
	// 直接获取所有值
	//data := r.GetFormMap()
	//r.Response.Writeln(data)

	// 根据对象来获取值
	//type UserInfo struct {
	//	Name     string `json:"name"`
	//	Age      int    `json:"age"`
	//	Password string `json:"password"`
	//	Version  string `json:"version"`
	//}
	//var userInfo UserInfo
	//err = r.ParseForm(&userInfo) // 只获取post参数的
	//if err == nil {
	//	r.Response.Writeln(userInfo)
	//}

	/**
	 * 获取所有参数
	 */
	//data := r.GetMap()
	//r.Response.Writeln(data)
	//err = r.Parse(&userInfo) // 获取所有参数的
	//if err == nil {
	//	r.Response.Writeln(userInfo)
	//}

	/**
	 * 直接读取req的参数
	 */
	r.Response.Writeln(req)
	return
}
