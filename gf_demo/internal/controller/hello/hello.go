// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package hello

import (
	"gf_demo/api/hello"
	"github.com/gogf/gf/v2/frame/g"
	"github.com/gogf/gf/v2/net/ghttp"
	"golang.org/x/net/context"
)

type Hello struct {
}

func NewHello() *Hello {
	return &Hello{}
}

func (h *Hello) SayHello(req *ghttp.Request) {
	req.Response.Writeln("你好你好呀")
}

/**
 * 获取GET请求参数
 */
func (h *Hello) Params(ctx context.Context, req *hello.ParamsReq) (res *hello.ParamsRes, err error) {
	r := g.RequestFromCtx(ctx)

	/**
	 * 获取GET请求参数
	 */
	// 获取路由的name参数，并设置默认值
	//name := r.GetQuery("name", "李四")
	// 通过Map的方式获取指定的参数，并设置默认值
	//data := r.GetQueryMap(g.Map{"name": "李四", "age": 20})
	// 通过Map的方式获取指定的参数，不指定值的话则是获取所有值
	//data := r.GetQueryMap()
	//r.Response.Writeln(data)

	/**
	 * 动态路由参数获取
	 */
	//routeParam := r.GetRouter("version")
	//routeParam := r.GetRouterMap()
	//r.Response.Writeln(routeParam)

	/**
	 * 获取POST请求参数
	 */
	// 指定字段获取
	//name := r.GetForm("name", "李四")
	// 直接获取所有值
	//data := r.GetFormMap()
	//r.Response.Writeln(data)

	// 根据对象来获取值
	//type UserInfo struct {
	//	Name     string `json:"name"`
	//	Age      int    `json:"age"`
	//	Password string `json:"password"`
	//	Version  string `json:"version"`
	//}
	//var userInfo UserInfo
	//err = r.ParseForm(&userInfo) // 只获取post参数的
	//if err == nil {
	//	r.Response.Writeln(userInfo)
	//}

	/**
	 * 获取所有参数
	 */
	//data := r.GetMap()
	//r.Response.Writeln(data)
	//err = r.Parse(&userInfo) // 获取所有参数的
	//if err == nil {
	//	r.Response.Writeln(userInfo)
	//}

	/**
	 * 直接读取req的参数
	 */
	r.Response.Writeln(req)
	return
}
